#!/bin/bash
#
# USAGE
#
#   generate_ssh_keys [-f output_keyfile]
#
# DESCRIPTION
#
#   Generates a public and private RSA key pair.
#
# ADDITIONAL INFORMATION
#
#   usage: ssh-keygen [-q] [-a rounds] [-b bits] [-C comment] [-f output_keyfile]
#                     [-m format] [-N new_passphrase] [-O option]
#                     [-t dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa]
#                     [-w provider]
#          ssh-keygen -p [-a rounds] [-f keyfile] [-m format] [-N new_passphrase]
#                      [-P old_passphrase]
#          ssh-keygen -i [-f input_keyfile] [-m key_format]
#          ssh-keygen -e [-f input_keyfile] [-m key_format]
#          ssh-keygen -y [-f input_keyfile]
#          ssh-keygen -c [-a rounds] [-C comment] [-f keyfile] [-P passphrase]
#          ssh-keygen -l [-v] [-E fingerprint_hash] [-f input_keyfile]
#          ssh-keygen -B [-f input_keyfile]
#          ssh-keygen -D pkcs11
#          ssh-keygen -F hostname [-lv] [-f known_hosts_file]
#          ssh-keygen -H [-f known_hosts_file]
#          ssh-keygen -K [-a rounds] [-w provider]
#          ssh-keygen -R hostname [-f known_hosts_file]
#          ssh-keygen -r hostname [-g] [-f input_keyfile]
#          ssh-keygen -M generate [-O option] output_file
#          ssh-keygen -M screen [-f input_file] [-O option] output_file
#          ssh-keygen -I certificate_identity -s ca_key [-hU] [-D pkcs11_provider]
#                     [-n principals] [-O option] [-V validity_interval]
#                     [-z serial_number] file ...
#          ssh-keygen -L [-f input_keyfile]
#          ssh-keygen -A [-a rounds] [-f prefix_path]
#          ssh-keygen -k -f krl_file [-u] [-s ca_public] [-z version_number]
#                     file ...
#          ssh-keygen -Q [-l] -f krl_file [file ...]
#          ssh-keygen -Y find-principals -s signature_file -f allowed_signers_file
#          ssh-keygen -Y check-novalidate -n namespace -s signature_file
#          ssh-keygen -Y sign -f key_file -n namespace file ...
#          ssh-keygen -Y verify -f allowed_signers_file -I signer_identity
#          		-n namespace -s signature_file [-r revocation_file]

function usage {
  echo 'generate_ssh_keys [-f output_keyfile]'
}

if [ -z "${1}" ] || [ "${1}" != '-f' ]; then
  echo -en "\033[0;31m"
  echo "Specify a valid option (-f)."
  echo -en "\033[0m\n"
  usage
  exit 1
fi

if [ -z "${2}" ]; then
  echo -en "\033[0;31m"
  echo "Specify an output keyfile."
  echo -en "\033[0m\n"
  usage
  exit 1
fi

OUTPUT_KEYFILE=${2}

# Exit if a key pair of the name 'OUTPUT_KEYFILE' already exists
if [ -e "${OUTPUT_KEYFILE}" ]; then
  echo -en "\033[0;31m"
  echo "File already exists."
  echo -en "\033[0m"
  exit 1
fi

# Create a .ssh directory if one does not already exist
if [ ! -d "${HOME}/.ssh" ]; then
  mkdir -p "${HOME}/.ssh"
fi

# Generate an RSA key pair
ssh-keygen -b 2048 -t rsa -f "${HOME}/.ssh/${OUTPUT_KEYFILE}" -P ""

# Restrict access to the private key
chmod 400 "${HOME}/.ssh/${OUTPUT_KEYFILE}"
